@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями
 */
img {
  display: block;
  max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Плавный скролл
   */
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
 */
svg *[fill] {
  fill: currentColor;
}

svg *[stroke] {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
:root {
  --color-fill: #F3EEE3;
  --color-dark: #181D14;
  --color-white: #fff;
  --color-green: #04DA00;
  --font-family-base: "Inter" sans-serif;
  --border-radius-btn: 36px;
  --border-radius-card: 40px;
  --container-width: 1278px;
  --container-width-header: 1235px;
  --container-padding-x: 20px;
  --frame-width: 1425px;
  --frame-width-int: 1425;
  --transition-duration: 0.2s;
}

@font-face {
  font-family: "inter" sans-serif;
  src: url("../fonts/Inter-Bold.woff2") format(".woff2");
  font-weight: 800;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "ui" sans-serif;
  src: url("../fonts/Inter-Medium.woff2") format(".woff2");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "inter" sans-serif;
  src: url("../fonts/Inter-Regular.woff2") format(".woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "inter" sans-serif;
  src: url("../fonts/Inter-SemiBold.woff2") format(".woff2");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
body {
  font-size: clamp(16px, 1.3333333333vw, 19px);
  font-family: "Inter", sans-serif;
  font-optical-sizing: auto;
  font-style: normal;
  font-variation-settings: "slnt" 0;
  font-weight: 400;
  line-height: 1.28;
  color: var(--color-dark);
  background-color: var(--color-white);
}

a,
button,
input,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
  color: inherit;
}

h1, h2 {
  font-weight: 800;
}

h1 {
  font-size: clamp(47px, 5.0526315789vw, 72px);
}

h2 {
  font-size: clamp(44px, 4.7719298246vw, 68px);
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.header-container {
  max-width: calc(var(--container-width-header) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: insert(100%) !important;
  clip: rect(0 0 0 0);
  overflow: hidden !important;
}

@media (max-width: 767px) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (min-width: 768px) {
  .visible-mobile {
    display: none !important;
  }
}

.button {
  background-color: var(--color-dark);
  color: var(--color-white);
  border-radius: var(--border-radius-btn);
}

.header {
  padding-top: 30px;
}
.header__inner {
  display: flex;
  justify-content: space-between;
  align-items: center;
  column-gap: 35px;
  padding: 0 43px;
}
.header__menu {
  margin-left: auto;
  font-size: 17px;
}
.header__menu-list {
  display: flex;
  align-items: center;
  column-gap: 44px;
}
.header__menu-link {
  position: relative;
  display: inline-flex;
  align-items: center;
  height: 38px;
}
.header__menu-link::after {
  content: "";
  position: absolute;
  top: 100%;
  left: 50%;
  translate: -50%;
  width: 0;
  height: 2px;
  background-color: currentColor;
  transition-duration: inherit;
}
@media (hover: hover) {
  .header__menu-link:hover::after {
    width: 100%;
  }
}
@media (hover: none) {
  .header__menu-link:active::after {
    width: 100%;
  }
}
.header__button {
  width: 151px;
  height: 45px;
}